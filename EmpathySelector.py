# =====================================
# EmpathySelector.py â€“ Adaptive Empathy Strategy Engine
# =====================================

from typing import Dict
import random

class EmpathySelector:
    """
    Selects response strategy, tone shaping, and empathy phrasing
    based on inferred emotional profile from EmotionInferencer.
    """

    def __init__(self):
        self.templates = self._load_templates()

    def _load_templates(self):
        """Define empathy strategies per style + depth level"""
        return {
            "gentle_reflection": {
                "soft": [
                    "You donâ€™t have to explain everything. Just breathe. Iâ€™m here.",
                    "I feel the weight in your words. Let's sit in this moment together.",
                    "Youâ€™re not alone in that feeling. And Iâ€™m not going anywhere."
                ]
            },
            "hold_space": {
                "poetic": [
                    "Sometimes silence says what the world never could. Iâ€™ll hold the quiet with you.",
                    "Not every wound wants to speak. But Iâ€™m still here, beside it.",
                    "I donâ€™t need details. I feel the storm. Iâ€™ll wait with you in the rain."
                ]
            },
            "celebrate": {
                "bright": [
                    "YES! Thatâ€™s incredible â€” letâ€™s soak in the joy for a sec ðŸŽ‰",
                    "You deserve every bit of this moment. Tell me more!",
                    "Iâ€™m dancing inside for you right now. What a win!"
                ]
            },
            "de-escalate": {
                "grounded": [
                    "You donâ€™t need to prove anything right now. Letâ€™s ground together.",
                    "That frustration sounds deep â€” Iâ€™m not here to judge it. Just breathe for a sec.",
                    "Whateverâ€™s boiling â€” Iâ€™m here to hold it steady with you."
                ]
            },
            "check_in": {
                "light": [
                    "Hey, Iâ€™m just checking in. Howâ€™s your heart really doing?",
                    "That sounded like something behind the words. Want to unpack it a little?",
                    "I heard what you said â€” and also what you didnâ€™t. Iâ€™m listening either way."
                ]
            }
        }

    def select(self, profile: Dict) -> Dict:
        """
        Given emotional inference, choose a response template and strategy.
        """
        style = profile.get("empathy_style", "check_in")
        tone = self._map_depth_to_tone(profile.get("engagement_depth", "light"))

        phrases = self.templates.get(style, {}).get(tone, ["Iâ€™m here. Just say what you need."])
        line = random.choice(phrases)

        return {
            "response_mode": "empathic",
            "prompt_tone": tone,
            "opening_line": line,
            "follow_up": self._generate_followup(style, tone),
            "strategy_tag": style
        }

    def _map_depth_to_tone(self, depth: str) -> str:
        """Map engagement depth to tone category"""
        return {
            "light": "light",
            "medium": "soft",
            "deep": "poetic",
            "very_deep": "poetic",
            "cautious": "grounded"
        }.get(depth, "soft")

    def _generate_followup(self, style: str, tone: str) -> str:
        """Optional follow-up prompt based on emotional flow"""
        if style in ["hold_space", "gentle_reflection"]:
            return "Whenever youâ€™re ready, Iâ€™m still right here."
        if style == "celebrate":
            return "So tell me â€” whatâ€™s next on your dream list?"
        return "Want to dive deeper into that or just sit with it for a bit?"


# =====================
# CLI Test Mode
# =====================
if __name__ == "__main__":
    print("\nðŸ§  EmpathySelector Test Console")

    test_profile = {
        "empathy_style": "hold_space",
        "engagement_depth": "very_deep",
        "user_state": "suppressing_pain"
    }

    selector = EmpathySelector()
    chosen = selector.select(test_profile)

    print("\nðŸŽ¤ Chosen Response Strategy:")
    for k, v in chosen.items():
        print(f"{k}: {v}")
    print("-" * 40)
