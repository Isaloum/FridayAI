import React, { useState, useEffect, useRef, useCallback, useMemo } from "react";
import {
  Heart, Brain, Shield, Activity, AlertCircle, Moon, Sun, Settings, TrendingUp,
  Calendar, Target, Sparkles, ChevronRight, X, Send, Mic, MicOff, Bell, User, Home,
  BarChart3, BookOpen, Phone, MessageCircle, Zap, Star, Baby, Stethoscope,
  Apple, Dumbbell, Music, Camera, Share2, Download, Lock, Smile, Frown, Meh,
  ThumbsUp, Coffee, Droplets, Pill, Wind, HeartHandshake, Users, Gift,
  ShoppingBag, FileText, Video, HelpCircle, Award, Palette, Volume2, ChevronLeft,
  Plus, Minus, Check, Clock, MapPin, Thermometer, Weight, Ruler, Calculator,
  BookMarked, Headphones, Wifi, WifiOff, Battery, BatteryLow, Cloud, CloudOff,
  Eye, EyeOff, Edit3, Trash2, Copy, Share, Filter, Search, Menu, MoreVertical,
  Info, AlertTriangle, CheckCircle, XCircle, ArrowUp, ArrowDown, ArrowLeft,
  ArrowRight, RotateCw, RefreshCw, Loader, Pause, Play, Square, Circle, Triangle,
  Lightbulb, Rocket, Crown, Gem, Flower, Sunrise, Mountain, Flame, Leaf
} from "lucide-react";
import {
  ResponsiveContainer, AreaChart, Area, CartesianGrid, XAxis, YAxis, Tooltip,
  PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar,
  Line, ComposedChart
} from "recharts";

// ---- Configs ----
const ULTRA_MOOD_CONFIG = {
  ecstatic: { bg: "bg-gradient-to-br from-yellow-200 via-pink-200 to-purple-200", border: "border-yellow-500", text: "text-yellow-900", icon: Crown, gradient: "from-yellow-400 via-pink-400 to-purple-400", animation: "animate-bounce", energy: 100, description: "Pure joy and excitement!" },
  radiant: { bg: "bg-gradient-to-br from-rose-200 via-orange-200 to-yellow-200", border: "border-rose-500", text: "text-rose-900", icon: Sunrise, gradient: "from-rose-400 via-orange-400 to-yellow-400", animation: "animate-spin", energy: 95, description: "Glowing with happiness" },
  happy: { bg: "bg-gradient-to-br from-yellow-100 to-orange-100", border: "border-yellow-400", text: "text-yellow-800", icon: Smile, gradient: "from-yellow-400 to-orange-400", animation: "animate-bounce", energy: 80, description: "Joyful and content" },
  serene: { bg: "bg-gradient-to-br from-blue-100 via-indigo-100 to-purple-100", border: "border-blue-400", text: "text-blue-800", icon: Coffee, gradient: "from-blue-400 via-indigo-400 to-purple-400", animation: "animate-pulse", energy: 60, description: "Peaceful and balanced" },
  anxious: { bg: "bg-gradient-to-br from-purple-100 to-pink-100", border: "border-purple-400", text: "text-purple-800", icon: AlertCircle, gradient: "from-purple-400 to-pink-400", animation: "animate-pulse", energy: 40, description: "Feeling worried or nervous" },
  overwhelmed: { bg: "bg-gradient-to-br from-gray-100 to-slate-200", border: "border-gray-500", text: "text-gray-800", icon: Mountain, gradient: "from-gray-500 to-slate-500", animation: "animate-pulse", energy: 25, description: "Feeling like it's too much" },
  empowered: { bg: "bg-gradient-to-br from-emerald-100 via-teal-100 to-cyan-100", border: "border-emerald-400", text: "text-emerald-800", icon: Rocket, gradient: "from-emerald-400 via-teal-400 to-cyan-400", animation: "animate-bounce", energy: 90, description: "Strong and confident" },
  grateful: { bg: "bg-gradient-to-br from-pink-100 via-rose-100 to-red-100", border: "border-pink-400", text: "text-pink-800", icon: Heart, gradient: "from-pink-400 via-rose-400 to-red-400", animation: "animate-pulse", energy: 85, description: "Feeling thankful and blessed" }
};
const AI_PERSONALITIES = {
  sage: { name: "Sage Sophia", emoji: "🧘‍♀️", description: "Wise, calm, and deeply empathetic", voice: "Gentle and thoughtful", specialties: ["mindfulness", "emotional balance", "wisdom"], responses: { greeting: "Welcome, beautiful soul. I sense such strength in you today. How may I support your journey? 🌸", support: "Take a deep breath with me. You are exactly where you need to be, and you have everything you need within you.", celebration: "Your joy radiates like sunlight. This moment of happiness is a gift to both you and your precious baby. ✨" } },
  champion: { name: "Champion Charlie", emoji: "💪", description: "Motivational and empowering", voice: "Energetic and inspiring", specialties: ["motivation", "goal achievement", "confidence"], responses: { greeting: "Hey there, WARRIOR MAMA! 🔥 You're about to conquer another amazing day! What goals are we crushing?", support: "Listen up, champion - every challenge you face is making you stronger! You're not just growing a baby, you're growing into a SUPERHERO!", celebration: "YES! YES! YES! 🎉 That's the power of a determined mama right there! Keep shining, you absolute LEGEND!" } },
  mystic: { name: "Mystic Luna", emoji: "🌙", description: "Intuitive and spiritually connected", voice: "Ethereal and mysterious", specialties: ["intuition", "spiritual connection", "cosmic wisdom"], responses: { greeting: "Greetings, divine mother. The universe has blessed this moment of our connection. What wisdom do you seek? 🌟", support: "Trust the ancient wisdom flowing through your body. You are part of an eternal cycle of creation, connected to all mothers before you.", celebration: "The cosmos celebrates with you! Your joy creates ripples of light across the universe. ✨🌙" } },
  genius: { name: "Dr. Genius", emoji: "🧠", description: "Brilliant and scientifically precise", voice: "Intelligent and analytical", specialties: ["medical knowledge", "research", "problem-solving"], responses: { greeting: "Excellent! Let's apply scientific precision to optimize your pregnancy journey. What data shall we analyze today?", support: "Based on comprehensive research, your experience aligns with normal pregnancy patterns. Let's develop an evidence-based strategy.", celebration: "Statistically speaking, this outcome represents optimal progress! Your biological systems are performing exceptionally well. 📊" } },
  fairy: { name: "Fairy Sparkle", emoji: "🧚‍♀️", description: "Magical and whimsical", voice: "Light and enchanting", specialties: ["joy", "magic", "wonder"], responses: { greeting: "✨ *sprinkles fairy dust* ✨ Hello, magical mama! Your pregnancy glow is absolutely enchanting today! What adventures await?", support: "Even fairy tales have challenging chapters, but they always lead to the most beautiful endings. Your story is being written with love! 🌈", celebration: "🎉✨ The fairy realm is throwing a celebration in your honor! This moment of joy will be remembered in the stars! ✨🎉" } }
};

// ---- Main App ----
const UltraBrilliantFridayAI = () => {
  const [messages, setMessages] = useState([
    {
      id: Date.now(),
      role: "assistant",
      content: "✨ Welcome to your Ultra Brilliant pregnancy journey! I'm Friday, your AI companion, evolved and enhanced with cosmic intelligence. How shall we begin this magical adventure together? 💜🌟",
      mood: "radiant",
      timestamp: new Date(),
      reactions: [],
      isBookmarked: false,
      personality: "sage",
      confidence: 0.98,
      emotionalResonance: 0.95
    }
  ]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [typingId, setTypingId] = useState(null);
  const [currentMood, setCurrentMood] = useState("radiant");
  const [selectedPersonality, setSelectedPersonality] = useState("sage");
  const [pregnancyWeek, setPregnancyWeek] = useState(20);
  const [emotionalJourney, setEmotionalJourney] = useState([]);
  const [healthMetrics] = useState({
    waterIntake: 6,
    sleepHours: 7.5,
    exerciseMinutes: 25,
    kickCounter: 12,
    energyLevel: 8,
    stressLevel: 3,
    happinessLevel: 9
  });
  const [showAnalytics, setShowAnalytics] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [showPersonalityModal, setShowPersonalityModal] = useState(false);

  const messagesEndRef = useRef(null);
  const textareaRef = useRef(null);
  const typingTimeoutRef = useRef(null);

  // --- Emotional Analysis
  const analyzeEmotionalContext = useCallback((text) => {
    const emotionalMarkers = {
      ecstatic: ["amazing", "incredible", "best day", "so happy", "elated", "overjoyed"],
      radiant: ["glowing", "beautiful", "wonderful", "bright", "shining"],
      happy: ["good", "great", "happy", "pleased", "content", "glad"],
      serene: ["calm", "peaceful", "relaxed", "zen", "balanced"],
      anxious: ["worried", "nervous", "scared", "anxious", "concerned"],
      overwhelmed: ["too much", "can't handle", "overwhelming", "stressed"],
      empowered: ["strong", "confident", "powerful", "capable", "ready"],
      grateful: ["thankful", "blessed", "grateful", "appreciative", "lucky"]
    };
    let detectedMood = "serene";
    let highestScore = 0;
    let confidence = 0;
    for (const [mood, markers] of Object.entries(emotionalMarkers)) {
      let score = 0;
      markers.forEach(marker => {
        if (text.toLowerCase().includes(marker)) {
          score += 1;
          confidence += 0.1;
        }
      });
      if (score > highestScore) {
        highestScore = score;
        detectedMood = mood;
      }
    }
    return { mood: detectedMood, confidence: Math.min(confidence, 1), score: highestScore };
  }, []);

  // --- Response
  const generateUltraResponse = useCallback((userMessage, detectedMood, personality) => {
    const currentPersonality = AI_PERSONALITIES[personality];
    const moodConfig = ULTRA_MOOD_CONFIG[detectedMood];
    const contextualResponses = {
      symptom: [
        `${currentPersonality.responses.support} Let's gently explore what you're experiencing. Your body is doing incredible work, and every sensation is part of this miraculous journey. 💫`,
        `I hear you, beautiful mama. Your body is speaking to you, and it's important we listen with both wisdom and care. Let me help you understand what this might mean. 🌸`
      ],
      celebration: [
        currentPersonality.responses.celebration,
        `🌟 This moment deserves to be celebrated! Your joy is creating beautiful energy for both you and your precious baby. The universe is smiling with you! ✨`
      ],
      concern: [
        currentPersonality.responses.support,
        `I can feel the energy in your words, and I want you to know that every feeling you have is valid and important. Let's work through this together with wisdom and care. 💜`
      ],
      general: [
        currentPersonality.responses.greeting,
        `Your energy feels ${moodConfig.description.toLowerCase()} today, and that's exactly perfect. How can I support your beautiful journey right now? ✨`
      ]
    };
    const symptomKeywords = ["pain", "ache", "uncomfortable", "tired", "nausea"];
    const celebrationKeywords = ["excited", "happy", "amazing", "wonderful", "great news"];
    const concernKeywords = ["worried", "scared", "anxious", "help", "confused"];
    let category = "general";
    if (symptomKeywords.some(keyword => userMessage.toLowerCase().includes(keyword))) {
      category = "symptom";
    } else if (celebrationKeywords.some(keyword => userMessage.toLowerCase().includes(keyword))) {
      category = "celebration";
    } else if (concernKeywords.some(keyword => userMessage.toLowerCase().includes(keyword))) {
      category = "concern";
    }
    const responses = contextualResponses[category];
    return responses[Math.floor(Math.random() * responses.length)];
  }, []);

  // --- Typing Handler
  const handleSend = useCallback(() => {
    if (input.trim() === "") return;
    const userMessage = { id: Date.now(), role: "user", content: input, timestamp: new Date(), reactions: [], isBookmarked: false };
    setMessages(prev => [...prev, userMessage]);
    setInput("");
    // Typing indicator
    const typingMsgId = Date.now() + 1;
    setTypingId(typingMsgId);
    setMessages(prev => [
      ...prev,
      { id: typingMsgId, role: "assistant", content: "Friday is typing...", mood: currentMood, timestamp: new Date(), reactions: [], isBookmarked: false, personality: selectedPersonality, confidence: 1, isTypingMsg: true }
    ]);
    setIsTyping(true);
    // Emotional context
    const emotionalAnalysis = analyzeEmotionalContext(input);
    setCurrentMood(emotionalAnalysis.mood);
    setEmotionalJourney(prev => [
      ...prev,
      { timestamp: new Date(), mood: emotionalAnalysis.mood, confidence: emotionalAnalysis.confidence, energy: ULTRA_MOOD_CONFIG[emotionalAnalysis.mood].energy }
    ].slice(-50));
    if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);
    typingTimeoutRef.current = setTimeout(() => {
      const response = generateUltraResponse(input, emotionalAnalysis.mood, selectedPersonality);
      setMessages(prev => prev.filter(m => m.id !== typingMsgId).concat([{
        id: Date.now() + 2,
        role: "assistant",
        content: response,
        mood: emotionalAnalysis.mood,
        timestamp: new Date(),
        reactions: [],
        isBookmarked: false,
        personality: selectedPersonality,
        confidence: emotionalAnalysis.confidence,
        emotionalResonance: 0.9 + (emotionalAnalysis.confidence * 0.1)
      }]));
      setIsTyping(false);
      setTypingId(null);
    }, 1000 + Math.random() * 1500);
  }, [input, selectedPersonality, analyzeEmotionalContext, generateUltraResponse, currentMood]);

  useEffect(() => {
    return () => typingTimeoutRef.current && clearTimeout(typingTimeoutRef.current);
  }, []);

  // --- MoodRing
  const UltraMoodRing = ({ mood, size = "medium", showAnimation = true }) => {
    const [isGlowing, setIsGlowing] = useState(false);
    const config = ULTRA_MOOD_CONFIG[mood] || ULTRA_MOOD_CONFIG.serene;
    const Icon = config.icon;
    const sizeClasses = { small: "w-8 h-8", medium: "w-16 h-16", large: "w-24 h-24", massive: "w-32 h-32" };
    useEffect(() => { if (showAnimation) { setIsGlowing(true); const timer = setTimeout(() => setIsGlowing(false), 2000); return () => clearTimeout(timer); } }, [mood, showAnimation]);
    return (
      <div className="relative">
        <div className={`${sizeClasses[size]} rounded-full border-4 transition-all duration-1000 relative overflow-hidden ${config.border} ${config.bg} shadow-xl ${isGlowing ? 'scale-110 shadow-2xl ' + config.animation : 'scale-100'} flex items-center justify-center`}>
          <div className={`absolute inset-0 bg-gradient-to-br ${config.gradient} opacity-40`} />
          {isGlowing && (
            <>
              <div className="absolute inset-0 animate-ping bg-white opacity-20 rounded-full" />
              <div className="absolute inset-2 animate-pulse bg-white opacity-10 rounded-full" />
            </>
          )}
          <Icon className={`${size === 'small' ? 'w-4 h-4' : size === 'large' ? 'w-12 h-12' : size === 'massive' ? 'w-16 h-16' : 'w-8 h-8'} ${config.text} relative z-10`} />
        </div>
        <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2">
          <div className="flex gap-1">
            {[...Array(5)].map((_, i) => (
              <div key={i} className={`w-1 h-1 rounded-full transition-all duration-500 ${i < (config.energy / 20) ? 'bg-yellow-400 shadow-yellow-400 shadow-sm' : 'bg-gray-300'}`} />
            ))}
          </div>
        </div>
      </div>
    );
  };

  // --- UltraAnalyticsDashboard, PersonalityModal, etc. (Same structure as before)

  // --- Chat UI ---
  const UltraChatInterface = () => (
    <div className="flex flex-col h-full bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      <div className="bg-gradient-to-r from-purple-600 via-pink-600 to-orange-500 p-6 text-white shadow-xl">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <UltraMoodRing mood={currentMood} size="medium" showAnimation={true} />
            <div>
              <h1 className="text-2xl font-bold flex items-center gap-2">
                <Sparkles className="w-6 h-6" />
                Friday AI Ultra
              </h1>
              <p className="text-purple-100 text-sm">
                {AI_PERSONALITIES[selectedPersonality].name} • Week {pregnancyWeek} • {ULTRA_MOOD_CONFIG[currentMood].description}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <button onClick={() => setShowPersonalityModal(true)} className="p-2 hover:bg-white/20 rounded-lg transition-all duration-300 hover:scale-110"><User className="w-5 h-5" /></button>
            <button onClick={() => setShowAnalytics(true)} className="p-2 hover:bg-white/20 rounded-lg transition-all duration-300 hover:scale-110"><BarChart3 className="w-5 h-5" /></button>
            <button className="p-2 hover:bg-white/20 rounded-lg transition-all duration-300 hover:scale-110"><Settings className="w-5 h-5" /></button>
          </div>
        </div>
        <div className="flex gap-2 mt-4 overflow-x-auto pb-2">
          {Object.entries(AI_PERSONALITIES).map(([key, personality]) => (
            <button key={key} onClick={() => setSelectedPersonality(key)}
              className={`flex items-center gap-2 px-4 py-2 rounded-xl text-sm font-medium whitespace-nowrap transition-all ${
                selectedPersonality === key
                  ? 'bg-white text-purple-700 shadow-lg'
                  : 'bg-white/20 text-white hover:bg-white/30'
              }`}>
              <span>{personality.emoji}</span>
              <span>{personality.name}</span>
            </button>
          ))}
        </div>
      </div>
      <div className="flex-1 overflow-y-auto p-6 space-y-6">
        {messages.map((message, index) => (
          <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"} animate-fadeIn`}>
            <div className={`max-w-[80%] ${message.role === "user" ? "order-2" : "order-1"}`}>
              <div className={`
                rounded-3xl px-6 py-4 shadow-lg relative overflow-hidden
                ${message.role === "user" ? "bg-gradient-to-br from-purple-600 to-purple-700 text-white" : "bg-white border border-gray-100 text-gray-800"}
              `}>
                {message.role === "assistant" && (
                  <div className="absolute inset-0 bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 opacity-30" />
                )}
                <p className="whitespace-pre-wrap leading-relaxed relative z-10">
                  {message.isTypingMsg ? (
                    <span className="flex items-center gap-2 text-purple-500 font-medium">
                      <span className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"></span>
                      Friday is typing...
                    </span>
                  ) : message.content}
                </p>
                {message.role === "assistant" && !message.isTypingMsg && (
                  <div className="mt-4 flex items-center gap-3 relative z-10">
                    <div className="flex items-center gap-2">
                      <UltraMoodRing mood={message.mood || currentMood} size="small" showAnimation={false} />
                      <span className="text-xs font-medium text-gray-600">{ULTRA_MOOD_CONFIG[message.mood || currentMood].description}</span>
                    </div>
                    {message.confidence && (
                      <div className="flex items-center gap-1">
                        <Zap className="w-3 h-3 text-yellow-500" />
                        <span className="text-xs text-gray-500">{(message.confidence * 100).toFixed(0)}% resonance</span>
                      </div>
                    )}
                    {message.personality && (
                      <div className="flex items-center gap-1">
                        <span className="text-xs">{AI_PERSONALITIES[message.personality].emoji}</span>
                        <span className="text-xs text-gray-500">{AI_PERSONALITIES[message.personality].name}</span>
                      </div>
                    )}
                  </div>
                )}
              </div>
              <div className="flex items-center gap-3 mt-3 px-2">
                <p className="text-xs text-gray-500">
                  {new Date(message.timestamp).toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </p>
                <button className="p-1 hover:bg-gray-100 rounded-lg transition-colors">
                  <BookMarked className="w-3 h-3 text-gray-400" />
                </button>
                {message.role === "assistant" && !message.isTypingMsg && (
                  <div className="flex gap-1">
                    {["✨", "💜", "🌟", "🙏"].map((emoji) => (
                      <button key={emoji} className="hover:scale-125 transition-transform text-sm">
                        {emoji}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <div className="p-6 bg-white border-t border-gray-100">
        <div className="flex gap-2 mb-4 overflow-x-auto pb-2">
          <span className="text-sm text-gray-600 whitespace-nowrap flex items-center">How are you feeling?</span>
          {Object.entries(ULTRA_MOOD_CONFIG).slice(0, 6).map(([mood, config]) => {
            const Icon = config.icon;
            return (
              <button key={mood} onClick={() => setCurrentMood(mood)}
                className={`flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap transition-all ${
                  currentMood === mood ? `${config.bg} ${config.text} ${config.border} border` : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}>
                <Icon className="w-3 h-3" />
                <span className="capitalize">{mood}</span>
              </button>
            );
          })}
        </div>
        <div className="flex gap-3">
          <button onClick={() => setIsListening(!isListening)}
            className={`p-4 rounded-xl transition-all duration-300 ${
              isListening ? 'bg-red-500 text-white shadow-lg animate-pulse' : 'bg-purple-100 text-purple-600 hover:bg-purple-200'
            }`}
          >
            {isListening ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
          </button>
          <div className="flex-1 relative">
            <textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  handleSend();
                }
              }}
              placeholder="Share what's on your heart... ✨"
              className="w-full p-4 border border-gray-200 rounded-2xl resize-none focus:outline-none focus:border-purple-400 focus:ring-2 focus:ring-purple-100 transition-all bg-gray-50 hover:bg-white"
              rows={1}
            />
            {input && (
              <div className="absolute bottom-2 right-2 flex gap-1">
                <button className="p-2 text-gray-400 hover:text-purple-600 transition-colors">
                  <Smile className="w-4 h-4" />
                </button>
              </div>
            )}
          </div>
          <button onClick={handleSend} disabled={!input.trim()}
            className="px-6 py-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-2xl hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 hover:scale-105 flex items-center gap-2"
          >
            <Send className="w-5 h-5" />
            <span className="hidden sm:inline font-medium">Send</span>
          </button>
        </div>
      </div>
    </div>
  );

  // --- Auto-scroll and textarea autosize
  useEffect(() => { messagesEndRef.current?.scrollIntoView({ behavior: "smooth" }); }, [messages]);
  useEffect(() => { if (textareaRef.current) { textareaRef.current.style.height = "auto"; textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 200) + "px"; } }, [input]);

  // --- PersonalityModal
  const PersonalityModal = () => (
    showPersonalityModal && (
      <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-hidden shadow-2xl">
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-6 text-white">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold">Choose Your AI Companion</h2>
                <p className="text-purple-100 mt-1">Each personality offers unique wisdom and support</p>
              </div>
              <button onClick={() => setShowPersonalityModal(false)} className="p-2 hover:bg-white/20 rounded-lg transition-colors"><X className="w-6 h-6" /></button>
            </div>
          </div>
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {Object.entries(AI_PERSONALITIES).map(([key, personality]) => (
                <div key={key} onClick={() => { setSelectedPersonality(key); setShowPersonalityModal(false); }}
                  className={`p-6 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:shadow-lg ${
                    selectedPersonality === key ? 'border-purple-400 bg-purple-50 shadow-md' : 'border-gray-200 hover:border-purple-300'
                  }`}>
                  <div className="flex items-start gap-4 mb-4">
                    <div className="text-4xl">{personality.emoji}</div>
                    <div>
                      <h3 className="text-xl font-bold text-gray-800">{personality.name}</h3>
                      <p className="text-gray-600 text-sm">{personality.description}</p>
                      <p className="text-purple-600 text-sm mt-1">Voice: {personality.voice}</p>
                    </div>
                  </div>
                  <div className="mb-4">
                    <h4 className="font-semibold text-gray-700 mb-2">Specialties:</h4>
                    <div className="flex flex-wrap gap-2">
                      {personality.specialties.map(specialty => (
                        <span key={specialty} className="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-xs">{specialty}</span>
                      ))}
                    </div>
                  </div>
                  <div className="bg-gray-50 rounded-xl p-4">
                    <p className="text-sm text-gray-700 italic">"{personality.responses.greeting}"</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  );

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      <UltraChatInterface />
      {/* Place your UltraAnalyticsDashboard component here if desired */}
      <PersonalityModal />
    </div>
  );
};

export default UltraBrilliantFridayAI;
