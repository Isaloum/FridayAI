<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logging System Design Guide</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }
        
        .nav-tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.1em;
            font-weight: 600;
            transition: all 0.3s ease;
            color: #495057;
        }
        
        .nav-tab:hover {
            background: #e9ecef;
            color: #2c3e50;
        }
        
        .nav-tab.active {
            background: #2c3e50;
            color: white;
            border-bottom: 3px solid #3498db;
        }
        
        .content {
            padding: 40px;
            min-height: 600px;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .architecture-diagram {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            margin: 20px 0;
            border-left: 5px solid #3498db;
        }
        
        .layer {
            background: white;
            margin: 15px 0;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .layer:hover {
            transform: translateY(-5px);
        }
        
        .layer h3 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 1.3em;
        }
        
        .code-block {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 25px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            margin: 20px 0;
            overflow-x: auto;
            position: relative;
        }
        
        .code-block::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #e74c3c, #f39c12, #2ecc71, #3498db);
        }
        
        .best-practice {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
        }
        
        .warning {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
        }
        
        .checklist {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            margin: 20px 0;
        }
        
        .checklist-item {
            display: flex;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            background: white;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .checklist-item:hover {
            background: #e9ecef;
        }
        
        .checklist-item input[type="checkbox"] {
            margin-right: 15px;
            transform: scale(1.5);
        }
        
        .implementation-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-left: 5px solid #3498db;
        }
        
        .log-level {
            display: inline-block;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 600;
            margin: 3px;
        }
        
        .level-debug { background: #95a5a6; color: white; }
        .level-info { background: #3498db; color: white; }
        .level-warn { background: #f39c12; color: white; }
        .level-error { background: #e74c3c; color: white; }
        .level-fatal { background: #8e44ad; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ App Logging System Design</h1>
            <p>Complete guide to building robust, scalable logging for your application</p>
        </div>
        
        <nav class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('architecture')">Architecture</button>
            <button class="nav-tab" onclick="showTab('implementation')">Implementation</button>
            <button class="nav-tab" onclick="showTab('best-practices')">Best Practices</button>
            <button class="nav-tab" onclick="showTab('monitoring')">Monitoring</button>
            <button class="nav-tab" onclick="showTab('checklist')">Checklist</button>
        </nav>
        
        <div class="content">
            <!-- Architecture Tab -->
            <div id="architecture" class="tab-content active">
                <h2>üèóÔ∏è Logging Architecture</h2>
                
                <div class="architecture-diagram">
                    <h3>Multi-Layer Logging System</h3>
                    
                    <div class="layer">
                        <h3>üì± Application Layer</h3>
                        <p><strong>Purpose:</strong> Capture business logic events, user actions, and application state changes</p>
                        <p><strong>Examples:</strong> User login, API calls, feature usage, errors</p>
                        <div>
                            <span class="log-level level-debug">DEBUG</span>
                            <span class="log-level level-info">INFO</span>
                            <span class="log-level level-warn">WARN</span>
                            <span class="log-level level-error">ERROR</span>
                        </div>
                    </div>
                    
                    <div class="layer">
                        <h3>üîÑ Infrastructure Layer</h3>
                        <p><strong>Purpose:</strong> System health, performance metrics, resource usage</p>
                        <p><strong>Examples:</strong> CPU usage, memory consumption, network latency, database connections</p>
                    </div>
                    
                    <div class="layer">
                        <h3>üîí Security Layer</h3>
                        <p><strong>Purpose:</strong> Security events, authentication, authorization, potential threats</p>
                        <p><strong>Examples:</strong> Failed logins, permission changes, suspicious activity</p>
                    </div>
                    
                    <div class="layer">
                        <h3>üìä Analytics Layer</h3>
                        <p><strong>Purpose:</strong> Business metrics, user behavior, performance analytics</p>
                        <p><strong>Examples:</strong> Conversion rates, feature adoption, user journeys</p>
                    </div>
                </div>
                
                <div class="implementation-card">
                    <h3>üîß Technology Stack Recommendations</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 20px;">
                        <div>
                            <h4>Logging Libraries</h4>
                            <ul>
                                <li><strong>Python:</strong> structlog, loguru</li>
                                <li><strong>Node.js:</strong> winston, pino</li>
                                <li><strong>Java:</strong> logback, log4j2</li>
                                <li><strong>Go:</strong> zap, logrus</li>
                            </ul>
                        </div>
                        <div>
                            <h4>Log Aggregation</h4>
                            <ul>
                                <li><strong>ELK Stack:</strong> Elasticsearch, Logstash, Kibana</li>
                                <li><strong>Modern:</strong> Fluentd, Grafana Loki</li>
                                <li><strong>Cloud:</strong> CloudWatch, Stackdriver</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Implementation Tab -->
            <div id="implementation" class="tab-content">
                <h2>üíª Implementation Examples</h2>
                
                <div class="implementation-card">
                    <h3>Python Structured Logging</h3>
                    <div class="code-block">
import structlog
import logging
from datetime import datetime

# Configure structured logging
structlog.configure(
    processors=[
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.make_filtering_bound_logger(30),
    logger_factory=structlog.PrintLoggerFactory(),
    cache_logger_on_first_use=True,
)

class AppLogger:
    def __init__(self, service_name):
        self.logger = structlog.get_logger()
        self.service_name = service_name
    
    def log_user_action(self, user_id, action, **kwargs):
        self.logger.info(
            "user_action",
            service=self.service_name,
            user_id=user_id,
            action=action,
            timestamp=datetime.utcnow().isoformat(),
            **kwargs
        )
    
    def log_error(self, error, context=None):
        self.logger.error(
            "application_error",
            service=self.service_name,
            error_type=type(error).__name__,
            error_message=str(error),
            context=context or {},
            timestamp=datetime.utcnow().isoformat()
        )

# Usage
logger = AppLogger("user-service")
logger.log_user_action("user123", "login", ip="192.168.1.1")
                    </div>
                </div>
                
                <div class="implementation-card">
                    <h3>Node.js with Winston</h3>
                    <div class="code-block">
const winston = require('winston');

const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.errors({ stack: true }),
        winston.format.json()
    ),
    defaultMeta: { service: 'app-service' },
    transports: [
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'combined.log' }),
        new winston.transports.Console({
            format: winston.format.simple()
        })
    ]
});

// Middleware for Express.js
const logRequest = (req, res, next) => {
    logger.info('HTTP Request', {
        method: req.method,
        url: req.url,
        userAgent: req.get('User-Agent'),
        ip: req.ip,
        timestamp: new Date().toISOString()
    });
    next();
};

// Error handling
process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception', { error: error.message, stack: error.stack });
    process.exit(1);
});
                    </div>
                </div>
                
                <div class="implementation-card">
                    <h3>Log Correlation & Tracing</h3>
                    <div class="code-block">
import uuid
from contextlib import contextmanager

class CorrelationContext:
    def __init__(self):
        self.correlation_id = None
        self.user_id = None
    
    @contextmanager
    def request_context(self, user_id=None):
        old_correlation_id = self.correlation_id
        old_user_id = self.user_id
        
        self.correlation_id = str(uuid.uuid4())
        self.user_id = user_id
        
        try:
            yield self
        finally:
            self.correlation_id = old_correlation_id
            self.user_id = old_user_id
    
    def get_context(self):
        return {
            'correlation_id': self.correlation_id,
            'user_id': self.user_id
        }

# Usage in your app
context = CorrelationContext()

def process_user_request(user_id, request_data):
    with context.request_context(user_id=user_id):
        logger.info("Processing request", **context.get_context(), data=request_data)
        # Your business logic here
        logger.info("Request completed", **context.get_context())
                    </div>
                </div>
            </div>
            
            <!-- Best Practices Tab -->
            <div id="best-practices" class="tab-content">
                <h2>‚úÖ Best Practices</h2>
                
                <div class="best-practice">
                    <h3>üéØ Structured Logging</h3>
                    <p><strong>Always use structured logs (JSON format)</strong> instead of plain text. This makes logs searchable and parseable by automated systems.</p>
                </div>
                
                <div class="best-practice">
                    <h3>üîç Consistent Log Levels</h3>
                    <p><strong>Use log levels consistently:</strong></p>
                    <ul style="margin-top: 10px;">
                        <li><strong>DEBUG:</strong> Detailed diagnostic info for developers</li>
                        <li><strong>INFO:</strong> General app flow and business events</li>
                        <li><strong>WARN:</strong> Potentially harmful situations</li>
                        <li><strong>ERROR:</strong> Error events that don't stop the app</li>
                        <li><strong>FATAL:</strong> Severe errors that cause termination</li>
                    </ul>
                </div>
                
                <div class="best-practice">
                    <h3>üîê Security Considerations</h3>
                    <p><strong>Never log sensitive data:</strong> passwords, credit cards, PII, API keys. Use masking or hashing for sensitive fields that must be logged.</p>
                </div>
                
                <div class="warning">
                    <h3>‚ö†Ô∏è Performance Impact</h3>
                    <p><strong>Logging can impact performance.</strong> Use asynchronous logging for high-throughput applications and consider log sampling for very chatty components.</p>
                </div>
                
                <div class="implementation-card">
                    <h3>üìù Log Message Guidelines</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <div>
                            <h4 style="color: #27ae60;">‚úÖ Good Examples</h4>
                            <div class="code-block" style="font-size: 0.9em;">
// Structured and informative
{
  "level": "info",
  "message": "user_login_successful",
  "user_id": "12345",
  "login_method": "oauth",
  "ip_address": "192.168.1.100",
  "timestamp": "2025-06-19T10:30:00Z"
}

// Clear error context
{
  "level": "error",
  "message": "database_connection_failed",
  "database": "users_db",
  "retry_count": 3,
  "error_code": "CONNECTION_TIMEOUT"
}
                            </div>
                        </div>
                        <div>
                            <h4 style="color: #e74c3c;">‚ùå Bad Examples</h4>
                            <div class="code-block" style="font-size: 0.9em;">
// Vague and unstructured
"User did something"
"Error happened"
"Request processed"

// Sensitive data exposed
{
  "message": "login_attempt",
  "username": "john@email.com",
  "password": "secret123",  // ‚ùå Never log passwords
  "credit_card": "4111-1111-1111-1111"  // ‚ùå Never log PII
}
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="implementation-card">
                    <h3>üîÑ Log Rotation & Retention</h3>
                    <p>Implement proper log rotation to prevent disk space issues:</p>
                    <div class="code-block">
# Logrotate configuration example
/var/log/myapp/*.log {
    daily
    rotate 30
    compress
    missingok
    create 0644 appuser appuser
    postrotate
        systemctl reload myapp
    endscript
}

# Retention policy
- Keep DEBUG logs: 7 days
- Keep INFO logs: 30 days  
- Keep WARN/ERROR logs: 90 days
- Archive FATAL logs: 1 year
                    </div>
                </div>
            </div>
            
            <!-- Monitoring Tab -->
            <div id="monitoring" class="tab-content">
                <h2>üìä Monitoring & Alerting</h2>
                
                <div class="implementation-card">
                    <h3>üö® Alert Configuration</h3>
                    <p>Set up intelligent alerting based on log patterns:</p>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 20px;">
                        <div class="layer">
                            <h4>Critical Alerts (Immediate)</h4>
                            <ul>
                                <li>Application crashes (FATAL level)</li>
                                <li>High error rates (&gt;5% in 5 min)</li>
                                <li>Security breaches</li>
                                <li>Database connection failures</li>
                            </ul>
                        </div>
                        <div class="layer">
                            <h4>Warning Alerts (Within 15 min)</h4>
                            <ul>
                                <li>Performance degradation</li>
                                <li>Unusual traffic patterns</li>
                                <li>Resource usage spikes</li>
                                <li>Third-party service issues</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <div class="implementation-card">
                    <h3>üìà Key Metrics to Monitor</h3>
                    <div class="code-block">
# Application Performance
- Response time percentiles (p50, p95, p99)
- Request rate (requests per second)
- Error rate (errors per total requests)
- Active user sessions

# System Health  
- CPU and memory usage
- Disk space and I/O
- Network latency
- Database query performance

# Business Metrics
- User registration rate
- Feature adoption
- Conversion funnel metrics
- Revenue per user

# Security Metrics
- Failed authentication attempts
- Privilege escalation attempts
- Unusual access patterns
- Data export activities
                    </div>
                </div>
                
                <div class="implementation-card">
                    <h3>üîç Log Analysis Queries</h3>
                    <p>Common queries for troubleshooting:</p>
                    <div class="code-block">
# Find all errors for a specific user
level:ERROR AND user_id:"12345" 

# Performance issues in last hour
level:WARN AND response_time:>5000 AND @timestamp:[now-1h TO now]

# Failed API calls by endpoint
level:ERROR AND api_endpoint:"/api/users" 

# Security: Multiple failed logins
action:"login_failed" AND user_id:"*" | stats count by user_id | where count > 5

# Database connection issues
message:"database_connection_failed" AND @timestamp:[now-24h TO now]
                    </div>
                </div>
                
                <div class="best-practice">
                    <h3>üìä Dashboard Design</h3>
                    <p><strong>Create role-specific dashboards:</strong></p>
                    <ul style="margin-top: 10px;">
                        <li><strong>Developers:</strong> Error rates, performance metrics, debug info</li>
                        <li><strong>Operations:</strong> System health, infrastructure metrics</li>
                        <li><strong>Business:</strong> User activity, conversion metrics</li>
                        <li><strong>Security:</strong> Threat detection, access patterns</li>
                    </ul>
                </div>
            </div>
            
            <!-- Checklist Tab -->
            <div id="checklist" class="tab-content">
                <h2>‚úÖ Implementation Checklist</h2>
                
                <div class="checklist">
                    <h3>üèóÔ∏è Architecture Setup</h3>
                    <div class="checklist-item">
                        <input type="checkbox" id="structured-logging">
                        <label for="structured-logging">Implement structured logging (JSON format)</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="log-levels">
                        <label for="log-levels">Define and implement consistent log levels</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="correlation-ids">
                        <label for="correlation-ids">Add correlation IDs for request tracing</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="centralized">
                        <label for="centralized">Set up centralized log aggregation</label>
                    </div>
                </div>
                
                <div class="checklist">
                    <h3>üîí Security & Compliance</h3>
                    <div class="checklist-item">
                        <input type="checkbox" id="sensitive-data">
                        <label for="sensitive-data">Implement sensitive data masking/filtering</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="access-control">
                        <label for="access-control">Configure log access controls</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="encryption">
                        <label for="encryption">Enable log encryption at rest and in transit</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="retention">
                        <label for="retention">Define log retention policies</label>
                    </div>
                </div>
                
                <div class="checklist">
                    <h3>üìä Monitoring & Alerting</h3>
                    <div class="checklist-item">
                        <input type="checkbox" id="dashboards">
                        <label for="dashboards">Create monitoring dashboards</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="alerts">
                        <label for="alerts">Configure critical error alerts</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="metrics">
                        <label for="metrics">Set up key performance metrics</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="health-checks">
                        <label for="health-checks">Implement log system health checks</label>
                    </div>
                </div>
                
                <div class="checklist">
                    <h3>üöÄ Performance & Scalability</h3>
                    <div class="checklist-item">
                        <input type="checkbox" id="async-logging">
                        <label for="async-logging">Implement asynchronous logging</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="log-rotation">
                        <label for="log-rotation">Configure log rotation</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="sampling">
                        <label for="sampling">Set up log sampling for high-volume events</label>
                    </div>
                    <div class="checklist-item">
                        <input type="checkbox" id="performance-testing">
                        <label for="performance-testing">Performance test logging overhead</label>
                    </div>
                </div>
                
                <div class="best-practice" style="margin-top: 30px;">
                    <h3>üéØ Success Criteria</h3>
                    <p>Your logging system is ready when you can:</p>
                    <ul style="margin-top: 10px;">
                        <li>Trace any user request end-to-end</li>
                        <li>Detect and alert on critical issues within 1 minute</li>
                        <li>Troubleshoot production issues without accessing servers</li>
                        <li>Generate business insights from log data</li>
                        <li>Meet compliance requirements for data retention</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        function showTab(tabName) {
            // Hide all tab contents
            const contents = document.querySelectorAll('.tab-content');
            contents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tabs
            const tabs = document.querySelectorAll('.nav-tab');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked tab
            event.target.classList.add('active');
        }
        
        // Add interactivity to checklist items
        document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('.checklist-item input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const item = this.closest('.checklist-item');
                    if (this.checked) {
                        item.style.background = '#d4edda';
                        item.style.borderLeft = '4px solid #28a745';
                    } else {
                        item.style.background = 'white';
                        item.style.borderLeft = 'none';
                    }
                });
            });
        });
    </script>
</body>
</html>